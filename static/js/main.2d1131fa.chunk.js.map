{"version":3,"sources":["components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/RoomList.js","components/NewRoomForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","username","text","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","roomId","messages","map","message","index","components_Message","key","id","senderId","React","Component","SendMessageForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","target","value","preventDefault","sendMessage","onSubmit","disabled","onChange","placeholder","type","RoomList","orderedRooms","toConsumableArray","rooms","sort","b","room","active","onClick","subscribeToRoom","href","name","NewRoomForm","roomName","createRoom","required","App","joinableRooms","joinedRooms","getRooms","_this2","Chatkit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","catch","err","console","log","_this3","getJoinableRooms","_this4","hooks","onNewMessage","concat","_this5","components_RoomList","components_MessageList","components_SendMessageForm","components_NewRoomForm","Boolean","window","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d1131fa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Message(props) {\r\n  return (\r\n    <div className=\"message\">\r\n      <div className=\"message-username\">{props.username}</div>\r\n      <div className=\"message-text\">{props.text}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Message from \"./Message\";\r\n\r\nclass MessageList extends React.Component {\r\n  componentWillUpdate() {\r\n    const node = ReactDOM.findDOMNode(this);\r\n    this.shouldScrollToBottom =\r\n      node.scrollTop + node.clientHeight + 100 >= node.scrollHeight;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.shouldScrollToBottom) {\r\n      const node = ReactDOM.findDOMNode(this);\r\n      node.scrollTop = node.scrollHeight;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.roomId) {\r\n      return (\r\n        <div className=\"message-list\">\r\n          <div className=\"join-room\">Join a room! &rarr;</div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"message-list\">\r\n        {this.props.messages.map((message, index) => {\r\n          return (\r\n            <Message\r\n              key={message.id}\r\n              username={message.senderId}\r\n              text={message.text}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageList;\r\n","import React from \"react\";\r\n\r\nclass SendMessageForm extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      message: \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({\r\n      message: e.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.sendMessage(this.state.message);\r\n    this.setState({\r\n      message: \"\"\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"send-message-form\">\r\n        <input\r\n          disabled={this.props.disabled}\r\n          onChange={this.handleChange}\r\n          value={this.state.message}\r\n          placeholder=\"Type your message and hit ENTER\"\r\n          type=\"text\"\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SendMessageForm;\r\n","import React from \"react\";\r\n\r\nclass RoomList extends React.Component {\r\n  render() {\r\n    const orderedRooms = [...this.props.rooms].sort((a, b) => a.id > b.id);\r\n    return (\r\n      <div className=\"rooms-list\">\r\n        <ul>\r\n          <h3>Your rooms:</h3>\r\n          {orderedRooms.map(room => {\r\n            const active = room.id === this.props.roomId ? \"active\" : \"\";\r\n            return (\r\n              <li key={room.id} className={\"room \" + active}>\r\n                <a onClick={() => this.props.subscribeToRoom(room.id)} href=\"#\">\r\n                  # {room.name}\r\n                </a>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoomList;\r\n","import React from \"react\";\r\n\r\nclass NewRoomForm extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      roomName: \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({\r\n      roomName: e.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.createRoom(this.state.roomName);\r\n    this.setState({ roomName: \"\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"new-room-form\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            value={this.state.roomName}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            placeholder=\"Create a room\"\r\n            required\r\n          />\r\n          <button id=\"create-room-btn\" type=\"submit\">\r\n            +\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewRoomForm;\r\n","import React from \"react\";\nimport Chatkit from \"@pusher/chatkit\";\nimport MessageList from \"./components/MessageList\";\nimport SendMessageForm from \"./components/SendMessageForm\";\nimport RoomList from \"./components/RoomList\";\nimport NewRoomForm from \"./components/NewRoomForm\";\n\nimport { tokenUrl, instanceLocator } from \"./config\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      roomId: null,\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: []\n    };\n    this.sendMessage = this.sendMessage.bind(this);\n    this.subscribeToRoom = this.subscribeToRoom.bind(this);\n    this.getRooms = this.getRooms.bind(this);\n    this.createRoom = this.createRoom.bind(this);\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator,\n      userId: \"perborgen\",\n      tokenProvider: new Chatkit.TokenProvider({\n        url: tokenUrl\n      })\n    });\n\n    chatManager\n      .connect()\n      .then(currentUser => {\n        this.currentUser = currentUser;\n        this.getRooms();\n      })\n      .catch(err => console.log(\"error on connecting: \", err));\n  }\n\n  getRooms() {\n    this.currentUser\n      .getJoinableRooms()\n      .then(joinableRooms => {\n        this.setState({\n          joinableRooms,\n          joinedRooms: this.currentUser.rooms\n        });\n      })\n      .catch(err => console.log(\"error on joinableRooms: \", err));\n  }\n\n  subscribeToRoom(roomId) {\n    this.setState({ messages: [] });\n    this.currentUser\n      .subscribeToRoom({\n        roomId: roomId,\n        hooks: {\n          onNewMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message]\n            });\n          }\n        }\n      })\n      .then(room => {\n        this.setState({\n          roomId: room.id\n        });\n        this.getRooms();\n      })\n      .catch(err => console.log(\"error on subscribing to room: \", err));\n  }\n\n  sendMessage(text) {\n    this.currentUser.sendMessage({\n      text,\n      roomId: this.state.roomId\n    });\n  }\n\n  createRoom(name) {\n    this.currentUser\n      .createRoom({\n        name\n      })\n      .then(room => {\n        this.subscribeToRoom(room.id);\n      })\n      .catch(err => console.log(\"error with createRoom: \", err));\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <RoomList\n          subscribeToRoom={this.subscribeToRoom}\n          rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}\n          roomId={this.state.roomId}\n        />\n        <MessageList\n          roomId={this.state.roomId}\n          messages={this.state.messages}\n        />\n        <SendMessageForm\n          disabled={!this.state.roomId}\n          sendMessage={this.sendMessage}\n        />\n        <NewRoomForm createRoom={this.createRoom} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const tokenUrl =\r\n  \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/a0fc1de4-82c2-4800-962c-06e78f9d4524/token\";\r\nconst instanceLocator = \"v1:us1:a0fc1de4-82c2-4800-962c-06e78f9d4524\";\r\n\r\nexport { tokenUrl, instanceLocator };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}